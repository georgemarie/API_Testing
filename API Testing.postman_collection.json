{
	"info": {
		"_postman_id": "5f32e57b-aee1-4942-bad1-f525464d7e01",
		"name": "API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31604097",
		"_collection_link": "https://www.postman.com/speeding-astronaut-136519/fusion/collection/h40vu6y/api-testing?action=share&source=collection_link&creator=31604097"
	},
	"item": [
		{
			"name": "1- Create User",
			"item": [
				{
					"name": "Create Valid User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"pm.test(\"Response has the user id\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"omar\",\r\n    \"password\": \"testpass123\",\r\n    \"email\": \"test@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"omar@mail.com\",\r\n    \"password\": \"test123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"omar khaled\",\r\n    \"email\": \"omar@mail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "No Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2- Get All Users",
			"item": [
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Non-empty array\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    pm.expect(responseData.length).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users in certain city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Non-empty array\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    pm.expect(responseData.length).to.be.above(0);\r",
									"})\r",
									"\r",
									"pm.test(\"All users are from San Antonio\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const allFromSanAntonio = responseData.every(user => \r",
									"        user.address && user.address.city && user.address.city.toLowerCase() === 'san antonio'\r",
									"    );\r",
									"    pm.expect(allFromSanAntonio).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/?city=San Antonio",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								""
							],
							"query": [
								{
									"key": "city",
									"value": "San Antonio"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3- Login User",
			"item": [
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response includes token\", function (){",
									"    var jsonBody = pm.response.json();",
									"    pm.expect(jsonBody).to.have.property(\"token\")",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"mor_2314\",\n    \"password\": \"83r5^_\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"make sure response says username or password is incorrect\", function (){",
									"    var responseBody = pm.response.text();",
									"    console.log(responseBody);",
									"    pm.expect(responseBody).to.include(\"username or password is incorrect\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"mor_2314\",\n    \"password\": \"iam a wrong password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4- Get All Products",
			"item": [
				{
					"name": "get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\",  function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is a non-empty array of products\", function () {",
									"    var jsonBody = pm.response.json();",
									"    pm.expect(jsonBody).to.be.an(\"array\").that.is.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid get products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function (){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Non-empty array\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    pm.expect(responseData.length).to.be.above(0);",
									"})",
									"",
									"pm.test(\"All products of men's clothing category\", function () {",
									"    const responseData = pm.response.json();",
									"    const allMensClothingCategory = responseData.every(prodcut => ",
									"        prodcut.category.toLowerCase() === \"men's clothing\"",
									"    );",
									"    pm.expect(allMensClothingCategory).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products?category=men's clothing",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "men's clothing"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5- Get Product by ID",
			"item": [
				{
					"name": "get product id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product has a title field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"title\").that.is.a(\"string\").that.is.not.empty;",
									"});",
									"",
									"// pm.test(\"Response is a non-empty product object\", function () {",
									"//     const jsonData = pm.response.json();",
									"//     pm.expect(jsonData).to.be.an(\"object\").that.is.not.empty;",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid get product id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/-1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"-1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6- Create Cart",
			"item": [
				{
					"name": "create cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// const now = new Date().toISOString().split(\"T\")[0]; // e.g., \"2025-05-03\"",
									"pm.variables.set(\"timestamp\", \"2020-03-02T00:00:00.000Z\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains cart ID\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.property(\"id\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 1001,\n  \"userId\": 100,\n  \"products\": [\n    {\n      \"id\": 1,\n      \"quantity\": 5\n    },\n    {\n      \"id\": 2,\n      \"quantity\": 2\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "create invalid cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// const now = new Date().toISOString().split(\"T\")[0]; // e.g., \"2025-05-03\"",
									"pm.variables.set(\"timestamp\", \"2020-03-02T00:00:00.000Z\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 1001,\n  \"userId\": 100,\n  \"products\": [\n    {\n      \"id\": 1,\n      \"quantity\": \"I want one\"\n    },\n    {\n      \"id\": 2,\n      \"quantity\": -6\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "7- Get a Single Cart by ID",
			"item": [
				{
					"name": "single cart retrieval",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Each product must have productId and quantity\", function () {",
									"    var jsonBody = pm.response.json();",
									"    pm.expect(jsonBody.products).to.be.an(\"array\");",
									"",
									"    jsonBody.products.forEach(function (product) {",
									"        pm.expect(product).to.have.property(\"productId\");",
									"        pm.expect(product).to.have.property(\"quantity\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid single cart retrieval",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response body contains status and message\"), function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\");",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/aa",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"aa"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "8- Delete a Cart",
			"item": [
				{
					"name": "delete cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"status 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid cart deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/-1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"-1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "9- Get All Carts",
			"item": [
				{
					"name": "Get all carts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Non-empty array\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    pm.expect(responseData.length).to.be.above(0);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all carts for a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Non-empty array\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    pm.expect(responseData.length).to.be.above(0);\r",
									"})\r",
									"\r",
									"pm.test(\"Carts belong to userId = 5\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const areUserCarts = responseData.every(cart => cart.userId === 5);\r",
									"    pm.expect(areUserCarts).to.be.true;\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/?userId=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								""
							],
							"query": [
								{
									"key": "userId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://fakestoreapi.com",
			"type": "string"
		}
	]
}